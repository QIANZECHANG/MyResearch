/* @generated */
digraph cfg {
"LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_1" [label="1: Start LLVMFuzzerTestOneInput\nFormals:  data:char* size:int\nLocals:  i:int 0$?%__sil_tmpSIL_temp_conditional___n$15:int n:int \n   DECLARE_LOCALS(&return,&i,&0$?%__sil_tmpSIL_temp_conditional___n$15,&n); [line 20, column 1]\n " color=yellow style=filled]
	

	 "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_1" -> "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_22" ;
"LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_2" [label="2: Exit LLVMFuzzerTestOneInput \n  " color=yellow style=filled]
	

"LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_3" [label="3:  Return Stmt \n   *&return:int=0 [line 27, column 5]\n " shape="box"]
	

	 "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_3" -> "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_2" ;
"LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_4" [label="4:  Call _fun_func \n   n$0=*&n:int [line 26, column 10]\n  n$1=_fun_func(n$0:int) [line 26, column 5]\n " shape="box"]
	

	 "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_4" -> "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_3" ;
"LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_5" [label="5: + \n  " ]
	

	 "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_5" -> "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_8" ;
"LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_6" [label="6:  DeclStmt \n   *&i:int=0 [line 22, column 9]\n " shape="box"]
	

	 "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_6" -> "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_5" ;
"LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_7" [label="7:  UnaryOperator \n   n$2=*&i:int [line 22, column 24]\n  *&i:int=(n$2 + 1) [line 22, column 24]\n " shape="box"]
	

	 "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_7" -> "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_5" ;
"LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_8" [label="8:  BinaryOperatorStmt: LT \n   n$3=*&i:int [line 22, column 17]\n  n$4=*&size:int [line 22, column 19]\n " shape="box"]
	

	 "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_8" -> "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_9" ;
	 "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_8" -> "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_10" ;
"LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_9" [label="9: Prune (true branch, for loop) \n   PRUNE((n$3 < n$4), true); [line 22, column 17]\n " shape="invhouse"]
	

	 "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_9" -> "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_18" ;
"LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_10" [label="10: Prune (false branch, for loop) \n   PRUNE(!(n$3 < n$4), false); [line 22, column 17]\n " shape="invhouse"]
	

	 "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_10" -> "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_4" ;
"LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_11" [label="11:  BinaryOperatorStmt: Assign \n   n$5=*&n:int [line 24, column 11]\n  n$6=*&data:char* [line 24, column 19]\n  n$7=*&i:int [line 24, column 24]\n  n$8=*(n$6 + n$7):char [line 24, column 17]\n  *&n:int=(((n$5 * 10) + n$8) - 48) [line 24, column 9]\n " shape="box"]
	

	 "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_11" -> "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_7" ;
"LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_12" [label="12: + \n  " ]
	

	 "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_12" -> "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_11" ;
"LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_13" [label="13: + \n  " ]
	

"LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_14" [label="14: Prune (true branch, boolean exp) \n   PRUNE((3 < 8), true); [line 51, column 14]\n " shape="invhouse"]
	

	 "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_14" -> "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_16" ;
"LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_15" [label="15: Prune (false branch, boolean exp) \n   PRUNE(!(3 < 8), false); [line 51, column 14]\n " shape="invhouse"]
	

	 "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_15" -> "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_17" ;
"LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_16" [label="16:  ConditionalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$15:int=((1 << 3) << 8) [line 51, column 14]\n " shape="box"]
	

	 "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_16" -> "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_13" ;
"LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_17" [label="17:  ConditionalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$15:int=((1 << 3) >> 8) [line 51, column 14]\n " shape="box"]
	

	 "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_17" -> "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_13" ;
"LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_18" [label="18:  BinaryOperatorStmt: And \n   n$9=_fun___ctype_b_loc() [line 23, column 14]\n  n$10=*n$9:unsigned short const * [line 23, column 14]\n  n$11=*&data:char* [line 23, column 14]\n  n$12=*&i:int [line 23, column 14]\n  n$13=*(n$11 + n$12):char [line 23, column 14]\n  n$14=*n$10[n$13]:unsigned short [line 23, column 14]\n " shape="box"]
	

	 "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_18" -> "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_19" ;
	 "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_18" -> "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_20" ;
"LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_19" [label="19: Prune (true branch, if) \n   PRUNE(!(n$14 & n$16), true); [line 23, column 14]\n " shape="invhouse"]
	

	 "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_19" -> "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_21" ;
"LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_20" [label="20: Prune (false branch, if) \n   PRUNE((n$14 & n$16), false); [line 23, column 14]\n " shape="invhouse"]
	

	 "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_20" -> "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_12" ;
"LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_21" [label="21:  Return Stmt \n   *&return:int=0 [line 23, column 33]\n " shape="box"]
	

	 "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_21" -> "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_2" ;
"LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_22" [label="22:  DeclStmt \n   *&n:int=0 [line 21, column 5]\n " shape="box"]
	

	 "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_22" -> "LLVMFuzzerTestOneInput.b418f71c2af2436f9f11b44095d886f7_6" ;
"func.7df4935f4a5a2865191ef74f64df8754_1" [label="1: Start func\nFormals:  a:int\nLocals:  q:int* p:int* \n   DECLARE_LOCALS(&return,&q,&p); [line 5, column 1]\n " color=yellow style=filled]
	

	 "func.7df4935f4a5a2865191ef74f64df8754_1" -> "func.7df4935f4a5a2865191ef74f64df8754_12" ;
"func.7df4935f4a5a2865191ef74f64df8754_2" [label="2: Exit func \n  " color=yellow style=filled]
	

"func.7df4935f4a5a2865191ef74f64df8754_3" [label="3:  Return Stmt \n   *&return:int=1 [line 15, column 5]\n " shape="box"]
	

	 "func.7df4935f4a5a2865191ef74f64df8754_3" -> "func.7df4935f4a5a2865191ef74f64df8754_2" ;
"func.7df4935f4a5a2865191ef74f64df8754_4" [label="4:  Call _fun_free \n   n$0=*&q:int* [line 14, column 10]\n  n$1=_fun_free(n$0:void*) [line 14, column 5]\n " shape="box"]
	

	 "func.7df4935f4a5a2865191ef74f64df8754_4" -> "func.7df4935f4a5a2865191ef74f64df8754_3" ;
"func.7df4935f4a5a2865191ef74f64df8754_5" [label="5:  BinaryOperatorStmt: Assign \n   n$2=*&p:int* [line 13, column 6]\n  *n$2:int=1 [line 13, column 5]\n " shape="box"]
	

	 "func.7df4935f4a5a2865191ef74f64df8754_5" -> "func.7df4935f4a5a2865191ef74f64df8754_4" ;
"func.7df4935f4a5a2865191ef74f64df8754_6" [label="6: + \n  " ]
	

	 "func.7df4935f4a5a2865191ef74f64df8754_6" -> "func.7df4935f4a5a2865191ef74f64df8754_5" ;
"func.7df4935f4a5a2865191ef74f64df8754_7" [label="7:  BinaryOperatorStmt: LT \n   n$3=*&a:int [line 8, column 8]\n " shape="box"]
	

	 "func.7df4935f4a5a2865191ef74f64df8754_7" -> "func.7df4935f4a5a2865191ef74f64df8754_8" ;
	 "func.7df4935f4a5a2865191ef74f64df8754_7" -> "func.7df4935f4a5a2865191ef74f64df8754_9" ;
"func.7df4935f4a5a2865191ef74f64df8754_8" [label="8: Prune (true branch, if) \n   PRUNE((n$3 < 5), true); [line 8, column 8]\n " shape="invhouse"]
	

	 "func.7df4935f4a5a2865191ef74f64df8754_8" -> "func.7df4935f4a5a2865191ef74f64df8754_10" ;
"func.7df4935f4a5a2865191ef74f64df8754_9" [label="9: Prune (false branch, if) \n   PRUNE(!(n$3 < 5), false); [line 8, column 8]\n " shape="invhouse"]
	

	 "func.7df4935f4a5a2865191ef74f64df8754_9" -> "func.7df4935f4a5a2865191ef74f64df8754_11" ;
"func.7df4935f4a5a2865191ef74f64df8754_10" [label="10:  BinaryOperatorStmt: Assign \n   n$4=*&p:int* [line 9, column 11]\n  *&q:int*=n$4 [line 9, column 9]\n " shape="box"]
	

	 "func.7df4935f4a5a2865191ef74f64df8754_10" -> "func.7df4935f4a5a2865191ef74f64df8754_6" ;
"func.7df4935f4a5a2865191ef74f64df8754_11" [label="11:  BinaryOperatorStmt: Assign \n   n$5=_fun_malloc(4:unsigned long) [line 11, column 11]\n  *&q:int*=n$5 [line 11, column 9]\n " shape="box"]
	

	 "func.7df4935f4a5a2865191ef74f64df8754_11" -> "func.7df4935f4a5a2865191ef74f64df8754_6" ;
"func.7df4935f4a5a2865191ef74f64df8754_12" [label="12:  DeclStmt \n   n$7=_fun_malloc(4:unsigned long) [line 6, column 12]\n  *&p:int*=n$7 [line 6, column 5]\n " shape="box"]
	

	 "func.7df4935f4a5a2865191ef74f64df8754_12" -> "func.7df4935f4a5a2865191ef74f64df8754_7" ;
}
