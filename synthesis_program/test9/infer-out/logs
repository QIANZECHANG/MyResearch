[1467][environment] CWD = /home/qian/synthesis_program/test9
[1467][environment] No .inferconfig file found
[1467][environment] Project root = /home/qian/synthesis_program/test9
[1467][environment] INFER_ARGS =   @/tmp/args.tmp.cbfa78
[1467][environment]   ++Contents of '/tmp/args.tmp.cbfa78':
[1467][environment]     -g run
[1467][environment]   
[1467][environment] command line arguments:   /home/qian/saver/bin/infer -g run -- clang -c
[1467][environment]                           infer.c
[1467][environment] Analyzer: checkers
[1467][environment] Active checkers: annotation reachability (Java), biabduction (C/C++/ObjC, Java), fragment retains view (Java), immutable cast (Java), liveness (C/C++/ObjC), printf args (Java), ownership (C/C++/ObjC), RacerD (C/C++/ObjC, Java), SIOF (C/C++/ObjC), uninitialized variables (C/C++/ObjC)
[1467][   progress] Logs in /home/qian/synthesis_program/test9/infer-out/logs
[1467][environment] Infer log identifier is 
Infer version v0.15.0-821a8db
[1467][environment] Copyright 2009 - present Facebook. All Rights Reserved.
[1467][environment] Driver mode:
[1467][environment] Clang driver mode:
[1467][environment] prog = 'clang'
[1467][environment] args =   -c infer.c
[1467][environment] 
[1467][   progress] Capturing in make/cc mode...
[1467][      debug] Clang options stored in file /tmp/clang_command_.tmp.b44539.txt
[1467][      debug] clang -### invocation: '/home/qian/saver/libs/infer/bin/../../facebook-clang-plugins/clang/install/bin/clang' '@/tmp/clang_command_.tmp.b44539.txt' 2>&1
[1467][      debug] 
[1467][      debug] *** Beginning capture of file /home/qian/synthesis_program/test9/infer.c ***
[1467][      debug] Clang options stored in file /tmp/clang_command_.tmp.f21bf8.txt
[1467][      debug] Clang options stored in file /tmp/clang_command_.tmp.57c201.txt
[1467][      debug] Processing infer.cClang frontend action is translating and linting
[1467][      debug] Start translating and linting of AST from stdin of infer.c
[1467][      debug] Loading the following linters files: /home/qian/saver/libs/infer/bin/../lib/linter_rules/linters.al
[1467][      debug] Loading linters rules from /home/qian/saver/libs/infer/bin/../lib/linter_rules/linters.al
[1467][      debug] 	Parsed identifier 'DIRECT_ATOMIC_PROPERTY_ACCESS'
[1467][      debug] 	Parsed identifier 'report_when'
[1467][      debug] 	Parsed identifier 'context_in_synchronized_block'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed NOT
[1467][      debug] 	Parsed identifier 'is_ivar_atomic'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed identifier 'is_method_property_accessor_of_ivar'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed NOT
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed identifier 'is_objc_constructor'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed NOT
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed identifier 'is_objc_dealloc'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed NOT
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed identifier 'ObjCIvarRefExpr'
[1467][      debug] 	Parsed InNode
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'message'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'suggestion'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'severity'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 
[1467][      debug] Parsed checker definition
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: DIRECT_ATOMIC_PROPERTY_ACCESS
[1467][      debug]     report_when=  
[1467][      debug]     IN-NODE ObjCIvarRefExpr: (((((NOT(context_in_synchronized_block()) AND is_ivar_atomic()) AND NOT(is_method_property_accessor_of_ivar())) AND NOT(is_objc_constructor())) AND NOT(is_objc_dealloc())))
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     Direct access to ivar %ivar_name% of an atomic property
[1467][      debug] 
[1467][      debug]     suggestion=  
[1467][      debug]     Accessing an ivar of an atomic property makes the property nonatomic.
[1467][      debug] 
[1467][      debug]     severity=  
[1467][      debug]     WARNING
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 	Parsed identifier 'ASSIGN_POINTER_WARNING'
[1467][      debug] 	Parsed identifier 'report_when'
[1467][      debug] 	Parsed identifier 'is_assign_property'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed identifier 'is_property_pointer_type'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed identifier 'ObjCPropertyDecl'
[1467][      debug] 	Parsed InNode
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'message'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'suggestion'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'severity'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 
[1467][      debug] Parsed checker definition
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: ASSIGN_POINTER_WARNING
[1467][      debug]     report_when=  
[1467][      debug]     IN-NODE ObjCPropertyDecl: ((is_assign_property() AND is_property_pointer_type()))
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     Property %decl_name% is a pointer type marked with the `assign` attribute
[1467][      debug] 
[1467][      debug]     suggestion=  
[1467][      debug]     Use a different attribute like `strong` or `weak`.
[1467][      debug] 
[1467][      debug]     severity=  
[1467][      debug]     WARNING
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 	Parsed identifier 'BAD_POINTER_COMPARISON'
[1467][      debug] 	Parsed identifier 'bool_op'
[1467][      debug] 	Parsed formula identifier 'bool_op'
[1467][      debug] 	Parsed identifier 'is_binop_with_kind'
[1467][      debug] 	Parsed string constant 'LAnd'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed identifier 'is_binop_with_kind'
[1467][      debug] 	Parsed string constant 'LOr'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed identifier 'is_unop_with_kind'
[1467][      debug] 	Parsed string constant 'LNot'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed identifier 'is_unop_with_kind'
[1467][      debug] 	Parsed string constant 'LNot'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'comparison_with_integral'
[1467][      debug] 	Parsed formula identifier 'comparison_with_integral'
[1467][      debug] 	Parsed identifier 'is_binop_with_kind'
[1467][      debug] 	Parsed string constant 'EQ'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed identifier 'is_binop_with_kind'
[1467][      debug] 	Parsed string constant 'NE'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed identifier 'is_binop_with_kind'
[1467][      debug] 	Parsed string constant 'GT'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed identifier 'is_binop_with_kind'
[1467][      debug] 	Parsed string constant 'GE'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed identifier 'is_binop_with_kind'
[1467][      debug] 	Parsed string constant 'LT'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed identifier 'is_binop_with_kind'
[1467][      debug] 	Parsed string constant 'LE'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed identifier 'is_node'
[1467][      debug] 	Parsed string constant 'ImplicitCastExpr'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed identifier 'has_type'
[1467][      debug] 	Parsed string constant 'NSNumber *'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed identifier 'has_cast_kind'
[1467][      debug] 	Parsed string constant 'IntegralToPointer'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed identifier 'has_cast_kind'
[1467][      debug] 	Parsed string constant 'NullToPointer'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed EX
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'root_is_stmt_expecting_bool'
[1467][      debug] 	Parsed formula identifier 'root_is_stmt_expecting_bool'
[1467][      debug] 	Parsed identifier 'is_node'
[1467][      debug] 	Parsed string constant 'IfStmt'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed identifier 'is_node'
[1467][      debug] 	Parsed string constant 'ForStmt'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed identifier 'is_node'
[1467][      debug] 	Parsed string constant 'WhileStmt'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'use_num_as_bool'
[1467][      debug] 	Parsed formula identifier 'use_num_as_bool'
[1467][      debug] 	Parsed identifier 'bool_op'
[1467][      debug] 	Parsed formula identifier 'bool_op'
[1467][      debug] 	Parsed identifier 'root_is_stmt_expecting_bool'
[1467][      debug] 	Parsed formula identifier 'root_is_stmt_expecting_bool'
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed identifier 'has_type'
[1467][      debug] 	Parsed string constant 'NSNumber *'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed EX
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'bad_conditional'
[1467][      debug] 	Parsed formula identifier 'bad_conditional'
[1467][      debug] 	Parsed identifier 'is_node'
[1467][      debug] 	Parsed string constant 'ConditionalOperator'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed identifier 'has_type'
[1467][      debug] 	Parsed string constant 'NSNumber *'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed EX WITH-TRANSITION 'Cond'
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'report_when'
[1467][      debug] 	Parsed identifier 'use_num_as_bool'
[1467][      debug] 	Parsed formula identifier 'use_num_as_bool'
[1467][      debug] 	Parsed identifier 'comparison_with_integral'
[1467][      debug] 	Parsed formula identifier 'comparison_with_integral'
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed identifier 'bad_conditional'
[1467][      debug] 	Parsed formula identifier 'bad_conditional'
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'message'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'suggestion'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 
[1467][      debug] Parsed checker definition
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: BAD_POINTER_COMPARISON
[1467][      debug]     bool_op=  
[1467][      debug]     (((is_binop_with_kind(LAnd) OR is_binop_with_kind(LOr)) OR is_unop_with_kind(LNot)) OR is_unop_with_kind(LNot))
[1467][      debug] 
[1467][      debug]     comparison_with_integral=  
[1467][      debug]     ((((((is_binop_with_kind(EQ) OR is_binop_with_kind(NE)) OR is_binop_with_kind(GT)) OR is_binop_with_kind(GE)) OR is_binop_with_kind(LT)) OR is_binop_with_kind(LE)) AND EX[->_](((is_node(ImplicitCastExpr) AND has_type(NSNumber *)) AND (has_cast_kind(IntegralToPointer) OR has_cast_kind(NullToPointer)))))
[1467][      debug] 
[1467][      debug]     root_is_stmt_expecting_bool=  
[1467][      debug]     ((is_node(IfStmt) OR is_node(ForStmt)) OR is_node(WhileStmt))
[1467][      debug] 
[1467][      debug]     use_num_as_bool=  
[1467][      debug]     ((bool_op() OR root_is_stmt_expecting_bool()) AND EX[->_](has_type(NSNumber *)))
[1467][      debug] 
[1467][      debug]     bad_conditional=  
[1467][      debug]     (is_node(ConditionalOperator) AND EX[->Cond](has_type(NSNumber *)))
[1467][      debug] 
[1467][      debug]     report_when=  
[1467][      debug]     ((use_num_as_bool() OR comparison_with_integral()) OR bad_conditional())
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     Implicitly checking whether NSNumber pointer is nil or comparing to integral value
[1467][      debug] 
[1467][      debug]     suggestion=  
[1467][      debug]     Did you mean to use/compare against the unboxed value instead? Please either explicitly compare the NSNumber instance to nil, or use one of the NSNumber accessors before the comparison.
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 	Parsed identifier 'REGISTERED_OBSERVER_BEING_DEALLOCATED'
[1467][      debug] 	Parsed identifier 'exists_method_calling_addObserver'
[1467][      debug] 	Parsed formula identifier 'exists_method_calling_addObserver'
[1467][      debug] 	Parsed identifier 'call_method'
[1467][      debug] 	Parsed string constant 'addObserver:selector:name:object:'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed EF
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'exists_method_calling_addObserverForName'
[1467][      debug] 	Parsed formula identifier 'exists_method_calling_addObserverForName'
[1467][      debug] 	Parsed identifier 'call_method'
[1467][      debug] 	Parsed string constant 'addObserverForName:object:queue:usingBlock:'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed EF
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'add_observer'
[1467][      debug] 	Parsed formula identifier 'add_observer'
[1467][      debug] 	Parsed identifier 'exists_method_calling_addObserver'
[1467][      debug] 	Parsed formula identifier 'exists_method_calling_addObserver'
[1467][      debug] 	Parsed identifier 'exists_method_calling_addObserverForName'
[1467][      debug] 	Parsed formula identifier 'exists_method_calling_addObserverForName'
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'eventually_addObserver'
[1467][      debug] 	Parsed formula identifier 'eventually_addObserver'
[1467][      debug] 	Parsed identifier 'ObjCMethodDecl'
[1467][      debug] 	Parsed identifier 'add_observer'
[1467][      debug] 	Parsed formula identifier 'add_observer'
[1467][      debug] 	Parsed ET with transition 'Body'
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'exists_method_calling_removeObserver'
[1467][      debug] 	Parsed formula identifier 'exists_method_calling_removeObserver'
[1467][      debug] 	Parsed identifier 'call_method'
[1467][      debug] 	Parsed string constant 'removeObserver:'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed EF
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'exists_method_calling_removeObserverName'
[1467][      debug] 	Parsed formula identifier 'exists_method_calling_removeObserverName'
[1467][      debug] 	Parsed identifier 'call_method'
[1467][      debug] 	Parsed string constant 'removeObserver:name:object:'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed EF
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'remove_observer'
[1467][      debug] 	Parsed formula identifier 'remove_observer'
[1467][      debug] 	Parsed identifier 'exists_method_calling_removeObserver'
[1467][      debug] 	Parsed formula identifier 'exists_method_calling_removeObserver'
[1467][      debug] 	Parsed identifier 'exists_method_calling_removeObserverName'
[1467][      debug] 	Parsed formula identifier 'exists_method_calling_removeObserverName'
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'remove_observer_in_block'
[1467][      debug] 	Parsed formula identifier 'remove_observer_in_block'
[1467][      debug] 	Parsed identifier 'BlockDecl'
[1467][      debug] 	Parsed identifier 'remove_observer'
[1467][      debug] 	Parsed formula identifier 'remove_observer'
[1467][      debug] 	Parsed ET with transition 'Body'
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'remove_observer1'
[1467][      debug] 	Parsed formula identifier 'remove_observer1'
[1467][      debug] 	Parsed identifier 'remove_observer'
[1467][      debug] 	Parsed formula identifier 'remove_observer'
[1467][      debug] 	Parsed identifier 'remove_observer_in_block'
[1467][      debug] 	Parsed formula identifier 'remove_observer_in_block'
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'remove_observer_in_method'
[1467][      debug] 	Parsed formula identifier 'remove_observer_in_method'
[1467][      debug] 	Parsed identifier 'ObjCMethodDecl'
[1467][      debug] 	Parsed identifier 'remove_observer1'
[1467][      debug] 	Parsed formula identifier 'remove_observer1'
[1467][      debug] 	Parsed ET with transition 'Body'
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'eventually_removeObserver'
[1467][      debug] 	Parsed formula identifier 'eventually_removeObserver'
[1467][      debug] 	Parsed identifier 'ObjCImplementationDecl'
[1467][      debug] 	Parsed identifier 'ObjCProtocolDecl'
[1467][      debug] 	Parsed identifier 'remove_observer_in_method'
[1467][      debug] 	Parsed formula identifier 'remove_observer_in_method'
[1467][      debug] 	Parsed identifier 'remove_observer_in_method'
[1467][      debug] 	Parsed formula identifier 'remove_observer_in_method'
[1467][      debug] 	Parsed identifier 'ObjCImplementationDecl'
[1467][      debug] 	Parsed EH
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed ET with transition '_'
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'report_when'
[1467][      debug] 	Parsed identifier 'eventually_addObserver'
[1467][      debug] 	Parsed formula identifier 'eventually_addObserver'
[1467][      debug] 	Parsed identifier 'eventually_removeObserver'
[1467][      debug] 	Parsed formula identifier 'eventually_removeObserver'
[1467][      debug] 	Parsed IMPLIES
[1467][      debug] 	Parsed NOT
[1467][      debug] 	Parsed identifier 'iphoneos_target_sdk_version_greater_or_equal'
[1467][      debug] 	Parsed string constant '9.0'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed NOT
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed identifier 'ObjCImplementationDecl'
[1467][      debug] 	Parsed identifier 'ObjCProtocolDecl'
[1467][      debug] 	Parsed InNode
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'message'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'suggestion'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 
[1467][      debug] Parsed checker definition
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: REGISTERED_OBSERVER_BEING_DEALLOCATED
[1467][      debug]     exists_method_calling_addObserver=  
[1467][      debug]     EF[->_](call_method(addObserver:selector:name:object:))
[1467][      debug] 
[1467][      debug]     exists_method_calling_addObserverForName=  
[1467][      debug]     EF[->_](call_method(addObserverForName:object:queue:usingBlock:))
[1467][      debug] 
[1467][      debug]     add_observer=  
[1467][      debug]     (exists_method_calling_addObserver() OR exists_method_calling_addObserverForName())
[1467][      debug] 
[1467][      debug]     eventually_addObserver=  
[1467][      debug]     ET[ObjCMethodDecl][Body](add_observer())
[1467][      debug] 
[1467][      debug]     exists_method_calling_removeObserver=  
[1467][      debug]     EF[->_](call_method(removeObserver:))
[1467][      debug] 
[1467][      debug]     exists_method_calling_removeObserverName=  
[1467][      debug]     EF[->_](call_method(removeObserver:name:object:))
[1467][      debug] 
[1467][      debug]     remove_observer=  
[1467][      debug]     (exists_method_calling_removeObserver() OR exists_method_calling_removeObserverName())
[1467][      debug] 
[1467][      debug]     remove_observer_in_block=  
[1467][      debug]     ET[BlockDecl][Body](remove_observer())
[1467][      debug] 
[1467][      debug]     remove_observer1=  
[1467][      debug]     (remove_observer() OR remove_observer_in_block())
[1467][      debug] 
[1467][      debug]     remove_observer_in_method=  
[1467][      debug]     ET[ObjCMethodDecl][Body](remove_observer1())
[1467][      debug] 
[1467][      debug]     eventually_removeObserver=  
[1467][      debug]     ET[ObjCImplementationDecl,ObjCProtocolDecl][_]((remove_observer_in_method() OR EH[ObjCImplementationDecl](remove_observer_in_method())))
[1467][      debug] 
[1467][      debug]     report_when=  
[1467][      debug]     IN-NODE ObjCImplementationDecl,ObjCProtocolDecl: ((NOT((eventually_addObserver() ==> eventually_removeObserver())) AND NOT(iphoneos_target_sdk_version_greater_or_equal(9.0))))
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     Object self is registered in a notification center but not being removed before deallocation
[1467][      debug] 
[1467][      debug]     suggestion=  
[1467][      debug]     Consider removing the object from the notification center before its deallocation.
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 	Parsed identifier 'STRONG_DELEGATE_WARNING'
[1467][      debug] 	Parsed identifier 'name_contains_delegate'
[1467][      debug] 	Parsed formula identifier 'name_contains_delegate'
[1467][      debug] 	Parsed identifier 'declaration_has_name'
[1467][      debug] 	Parsed regular expression '[dD]elegate'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'name_does_not_contain_delegates'
[1467][      debug] 	Parsed formula identifier 'name_does_not_contain_delegates'
[1467][      debug] 	Parsed identifier 'declaration_has_name'
[1467][      debug] 	Parsed regular expression '[dD]elegates'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed NOT
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'name_does_not_contains_queue'
[1467][      debug] 	Parsed formula identifier 'name_does_not_contains_queue'
[1467][      debug] 	Parsed identifier 'declaration_has_name'
[1467][      debug] 	Parsed regular expression '[qQ]ueue'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed NOT
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'report_when'
[1467][      debug] 	Parsed identifier 'name_contains_delegate'
[1467][      debug] 	Parsed formula identifier 'name_contains_delegate'
[1467][      debug] 	Parsed identifier 'name_does_not_contain_delegates'
[1467][      debug] 	Parsed formula identifier 'name_does_not_contain_delegates'
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed identifier 'name_does_not_contains_queue'
[1467][      debug] 	Parsed formula identifier 'name_does_not_contains_queue'
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed identifier 'is_strong_property'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed identifier 'ObjCPropertyDecl'
[1467][      debug] 	Parsed InNode
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'message'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'suggestion'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 
[1467][      debug] Parsed checker definition
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: STRONG_DELEGATE_WARNING
[1467][      debug]     name_contains_delegate=  
[1467][      debug]     declaration_has_name([dD]elegate)
[1467][      debug] 
[1467][      debug]     name_does_not_contain_delegates=  
[1467][      debug]     NOT(declaration_has_name([dD]elegates))
[1467][      debug] 
[1467][      debug]     name_does_not_contains_queue=  
[1467][      debug]     NOT(declaration_has_name([qQ]ueue))
[1467][      debug] 
[1467][      debug]     report_when=  
[1467][      debug]     IN-NODE ObjCPropertyDecl: ((((name_contains_delegate() AND name_does_not_contain_delegates()) AND name_does_not_contains_queue()) AND is_strong_property()))
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     Property or ivar %decl_name% declared strong
[1467][      debug] 
[1467][      debug]     suggestion=  
[1467][      debug]     In general delegates should be declared weak or assign.
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 	Parsed identifier 'GLOBAL_VARIABLE_INITIALIZED_WITH_FUNCTION_OR_METHOD_CALL'
[1467][      debug] 	Parsed identifier 'is_global_variable'
[1467][      debug] 	Parsed formula identifier 'is_global_variable'
[1467][      debug] 	Parsed identifier 'is_objc_extension'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed identifier 'is_global_var'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed identifier 'is_const_var'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed NOT
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'makes_an_expensive_call'
[1467][      debug] 	Parsed formula identifier 'makes_an_expensive_call'
[1467][      debug] 	Parsed identifier 'is_node'
[1467][      debug] 	Parsed string constant 'CallExpr'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed identifier 'call_function'
[1467][      debug] 	Parsed string constant 'CGPointMake'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed NOT
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed identifier 'is_node'
[1467][      debug] 	Parsed string constant 'CXXTemporaryObjectExpr'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed identifier 'is_node'
[1467][      debug] 	Parsed string constant 'CXXMemberCallExpr'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed identifier 'is_node'
[1467][      debug] 	Parsed string constant 'CXXOperatorCallExpr'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed identifier 'is_node'
[1467][      debug] 	Parsed string constant 'ObjCMessageExpr'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'is_initialized_with_expensive_call'
[1467][      debug] 	Parsed formula identifier 'is_initialized_with_expensive_call'
[1467][      debug] 	Parsed identifier 'VarDecl'
[1467][      debug] 	Parsed identifier 'makes_an_expensive_call'
[1467][      debug] 	Parsed formula identifier 'makes_an_expensive_call'
[1467][      debug] 	Parsed EF
[1467][      debug] 	Parsed ET with transition 'InitExpr'
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'report_when'
[1467][      debug] 	Parsed identifier 'is_global_variable'
[1467][      debug] 	Parsed formula identifier 'is_global_variable'
[1467][      debug] 	Parsed identifier 'is_initialized_with_expensive_call'
[1467][      debug] 	Parsed formula identifier 'is_initialized_with_expensive_call'
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed identifier 'VarDecl'
[1467][      debug] 	Parsed InNode
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'message'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'suggestion'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 
[1467][      debug] Parsed checker definition
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: GLOBAL_VARIABLE_INITIALIZED_WITH_FUNCTION_OR_METHOD_CALL
[1467][      debug]     is_global_variable=  
[1467][      debug]     ((is_objc_extension() AND is_global_var()) AND NOT(is_const_var()))
[1467][      debug] 
[1467][      debug]     makes_an_expensive_call=  
[1467][      debug]     (((((is_node(CallExpr) AND NOT(call_function(CGPointMake))) OR is_node(CXXTemporaryObjectExpr)) OR is_node(CXXMemberCallExpr)) OR is_node(CXXOperatorCallExpr)) OR is_node(ObjCMessageExpr))
[1467][      debug] 
[1467][      debug]     is_initialized_with_expensive_call=  
[1467][      debug]     ET[VarDecl][InitExpr](EF[->_](makes_an_expensive_call()))
[1467][      debug] 
[1467][      debug]     report_when=  
[1467][      debug]     IN-NODE VarDecl: ((is_global_variable() AND is_initialized_with_expensive_call()))
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     Global variable %decl_name% is initialized using a function or method call
[1467][      debug] 
[1467][      debug]     suggestion=  
[1467][      debug]     If the function/method call is expensive, it can affect the starting time of the app.
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 	Parsed identifier 'CXX_REFERENCE_CAPTURED_IN_OBJC_BLOCK'
[1467][      debug] 	Parsed identifier 'report_when'
[1467][      debug] 	Parsed identifier 'is_node'
[1467][      debug] 	Parsed string constant 'BlockDecl'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed identifier 'captures_cxx_references'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed EX
[1467][      debug] 	Parsed identifier 'BlockExpr'
[1467][      debug] 	Parsed InNode
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'message'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'suggestion'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 
[1467][      debug] Parsed checker definition
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: CXX_REFERENCE_CAPTURED_IN_OBJC_BLOCK
[1467][      debug]     report_when=  
[1467][      debug]     IN-NODE BlockExpr: (EX[->_]((is_node(BlockDecl) AND captures_cxx_references())))
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     C++ Reference variable(s) %cxx_ref_captured_in_block% captured by Objective-C block
[1467][      debug] 
[1467][      debug]     suggestion=  
[1467][      debug]     C++ References are unmanaged and may be invalid by the time the block executes.
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 	Parsed identifier 'UNAVAILABLE_API_IN_SUPPORTED_IOS_SDK'
[1467][      debug] 	Parsed identifier 'report_when'
[1467][      debug] 	Parsed identifier 'decl_unavailable_in_supported_ios_sdk'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed identifier 'within_responds_to_selector_block'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed NOT
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed EX with transition 'PointerToDecl'
[1467][      debug] 	Parsed identifier 'DeclRefExpr'
[1467][      debug] 	Parsed identifier 'ObjCMessageExpr'
[1467][      debug] 	Parsed InNode
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'message'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'name'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'suggestion'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'severity'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 
[1467][      debug] Parsed checker definition
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: UNAVAILABLE_API_IN_SUPPORTED_IOS_SDK
[1467][      debug]     report_when=  
[1467][      debug]     IN-NODE DeclRefExpr,ObjCMessageExpr: (EX[->PointerToDecl]((decl_unavailable_in_supported_ios_sdk() AND NOT(within_responds_to_selector_block()))))
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     %decl_ref_or_selector_name% is not available in the required iOS SDK version %iphoneos_target_sdk_version% (only available from version %available_ios_sdk%)
[1467][      debug] 
[1467][      debug]     name_hum_readable=  
[1467][      debug]     Unavailable API In Supported iOS SDK
[1467][      debug] 
[1467][      debug]     suggestion=  
[1467][      debug]     This could cause a crash.
[1467][      debug] 
[1467][      debug]     severity=  
[1467][      debug]     ERROR
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 	Parsed identifier 'UNAVAILABLE_CLASS_IN_SUPPORTED_IOS_SDK'
[1467][      debug] 	Parsed identifier 'report_when'
[1467][      debug] 	Parsed identifier 'class_unavailable_in_supported_ios_sdk'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed identifier 'within_available_class_block'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed NOT
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed identifier 'call_class_method'
[1467][      debug] 	Parsed regular expression '.*'
[1467][      debug] 	Parsed string constant 'alloc'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed identifier 'call_class_method'
[1467][      debug] 	Parsed regular expression '.*'
[1467][      debug] 	Parsed string constant 'new'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed OR
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed identifier 'ObjCMessageExpr'
[1467][      debug] 	Parsed InNode
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'message'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'name'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'severity'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'mode'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 
[1467][      debug] Parsed checker definition
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: UNAVAILABLE_CLASS_IN_SUPPORTED_IOS_SDK
[1467][      debug]     report_when=  
[1467][      debug]     IN-NODE ObjCMessageExpr: (((class_unavailable_in_supported_ios_sdk() AND NOT(within_available_class_block())) AND (call_class_method(.*,alloc) OR call_class_method(.*,new))))
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     The receiver %receiver_method_call% of %name% is not available in the required iOS SDK version %iphoneos_target_sdk_version% (only available from version %class_available_ios_sdk%)
[1467][      debug] 
[1467][      debug]     name_hum_readable=  
[1467][      debug]     Unavailable API In Supported iOS SDK
[1467][      debug] 
[1467][      debug]     severity=  
[1467][      debug]     ERROR
[1467][      debug] 
[1467][      debug]     mode=  
[1467][      debug]     ON
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 	Parsed identifier 'POINTER_TO_INTEGRAL_IMPLICIT_CAST'
[1467][      debug] 	Parsed identifier 'report_when'
[1467][      debug] 	Parsed identifier 'has_cast_kind'
[1467][      debug] 	Parsed string constant 'PointerToIntegral'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed identifier 'ImplicitCastExpr'
[1467][      debug] 	Parsed InNode
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'message'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'doc_url'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 
[1467][      debug] Parsed checker definition
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: POINTER_TO_INTEGRAL_IMPLICIT_CAST
[1467][      debug]     report_when=  
[1467][      debug]     IN-NODE ImplicitCastExpr: (has_cast_kind(PointerToIntegral))
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     Implicit conversion from %child_type% to %type% in usage of %name%
[1467][      debug] 
[1467][      debug]     doc_url=  
[1467][      debug]     https://clang.llvm.org/docs/DiagnosticsReference.html#wint-conversion
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 	Parsed identifier 'POINTER_TO_CONST_OBJC_CLASS'
[1467][      debug] 	Parsed identifier 'name'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'report_when'
[1467][      debug] 	Parsed identifier 'is_decl'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed identifier 'has_type_const_ptr_to_objc_class'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'message'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'suggestion'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'severity'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'mode'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 
[1467][      debug] Parsed checker definition
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: POINTER_TO_CONST_OBJC_CLASS
[1467][      debug]     name_hum_readable=  
[1467][      debug]     Pointer To const Objective-C Class
[1467][      debug] 
[1467][      debug]     report_when=  
[1467][      debug]     (is_decl() AND has_type_const_ptr_to_objc_class())
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     `const %class_name%*` may not mean what you want:
                   it represents a mutable pointer pointing to an Objective-C
                   class where the ivars cannot be changed.
[1467][      debug] 
[1467][      debug]     suggestion=  
[1467][      debug]     Consider using `%class_name% *const` instead, meaning
	                  the destination of the pointer cannot be changed.
[1467][      debug] 
[1467][      debug]     severity=  
[1467][      debug]     WARNING
[1467][      debug] 
[1467][      debug]     mode=  
[1467][      debug]     ON
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 	Parsed identifier 'DISCOURAGED_WEAK_PROPERTY_CUSTOM_SETTER'
[1467][      debug] 	Parsed identifier 'has_body'
[1467][      debug] 	Parsed formula identifier 'has_body'
[1467][      debug] 	Parsed True
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed EX with transition 'Body'
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'is_weak_property_setter'
[1467][      debug] 	Parsed formula identifier 'is_weak_property_setter'
[1467][      debug] 	Parsed string constant 'setter'
[1467][      debug] 	Parsed identifier 'is_weak_property'
[1467][      debug] 	Parsed predicate
[1467][      debug] 	Parsed atomic formula
[1467][      debug] 	Parsed EX with transition 'AccessorForProperty setter'
[1467][      debug] 	Parsed LET clause
[1467][      debug] 	Parsed identifier 'report_when'
[1467][      debug] 	Parsed identifier 'has_body'
[1467][      debug] 	Parsed formula identifier 'has_body'
[1467][      debug] 	Parsed identifier 'is_weak_property_setter'
[1467][      debug] 	Parsed formula identifier 'is_weak_property_setter'
[1467][      debug] 	Parsed AND
[1467][      debug] 	Parsed identifier 'ObjCMethodDecl'
[1467][      debug] 	Parsed InNode
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'message'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'severity'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 	Parsed identifier 'mode'
[1467][      debug] 	Parsed SET clause
[1467][      debug] 
[1467][      debug] Parsed checker definition
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: DISCOURAGED_WEAK_PROPERTY_CUSTOM_SETTER
[1467][      debug]     has_body=  
[1467][      debug]     EX[->Body](True)
[1467][      debug] 
[1467][      debug]     is_weak_property_setter=  
[1467][      debug]     EX[->AccessorForProperty setter](is_weak_property())
[1467][      debug] 
[1467][      debug]     report_when=  
[1467][      debug]     IN-NODE ObjCMethodDecl: ((has_body() AND is_weak_property_setter()))
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     Custom setters are not called when ARC sets weak properties to nil.
[1467][      debug] 
[1467][      debug]     severity=  
[1467][      debug]     WARNING
[1467][      debug] 
[1467][      debug]     mode=  
[1467][      debug]     OFF
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] #### Start parsing import macros #####
[1467][      debug] #### Add global macros to import macros #####
[1467][      debug] #### Start Expanding checkers #####
[1467][      debug]  +Start expanding DIRECT_ATOMIC_PROPERTY_ACCESS
[1467][      debug]   -Expanding report_when
[1467][      debug]  +Start expanding ASSIGN_POINTER_WARNING
[1467][      debug]   -Expanding report_when
[1467][      debug]  +Start expanding BAD_POINTER_COMPARISON
[1467][      debug]   -Expanding report_when
[1467][      debug]  +Start expanding REGISTERED_OBSERVER_BEING_DEALLOCATED
[1467][      debug]   -Expanding report_when
[1467][      debug]  +Start expanding STRONG_DELEGATE_WARNING
[1467][      debug]   -Expanding report_when
[1467][      debug]  +Start expanding GLOBAL_VARIABLE_INITIALIZED_WITH_FUNCTION_OR_METHOD_CALL
[1467][      debug]   -Expanding report_when
[1467][      debug]  +Start expanding CXX_REFERENCE_CAPTURED_IN_OBJC_BLOCK
[1467][      debug]   -Expanding report_when
[1467][      debug]  +Start expanding UNAVAILABLE_API_IN_SUPPORTED_IOS_SDK
[1467][      debug]   -Expanding report_when
[1467][      debug]  +Start expanding UNAVAILABLE_CLASS_IN_SUPPORTED_IOS_SDK
[1467][      debug]   -Expanding report_when
[1467][      debug]  +Start expanding POINTER_TO_INTEGRAL_IMPLICIT_CAST
[1467][      debug]   -Expanding report_when
[1467][      debug]  +Start expanding POINTER_TO_CONST_OBJC_CLASS
[1467][      debug]   -Expanding report_when
[1467][      debug]  +Start expanding DISCOURAGED_WEAK_PROPERTY_CUSTOM_SETTER
[1467][      debug]   -Expanding report_when
[1467][      debug] #### Checkers Expanded #####
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: DIRECT_ATOMIC_PROPERTY_ACCESS
[1467][      debug]     severity=  
[1467][      debug]     WARNING
[1467][      debug] 
[1467][      debug]     suggestion=  
[1467][      debug]     Accessing an ivar of an atomic property makes the property nonatomic.
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     Direct access to ivar %ivar_name% of an atomic property
[1467][      debug] 
[1467][      debug]     report_when=  
[1467][      debug]     IN-NODE ObjCIvarRefExpr: (((((NOT(context_in_synchronized_block()) AND is_ivar_atomic()) AND NOT(is_method_property_accessor_of_ivar())) AND NOT(is_objc_constructor())) AND NOT(is_objc_dealloc())))
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: ASSIGN_POINTER_WARNING
[1467][      debug]     severity=  
[1467][      debug]     WARNING
[1467][      debug] 
[1467][      debug]     suggestion=  
[1467][      debug]     Use a different attribute like `strong` or `weak`.
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     Property %decl_name% is a pointer type marked with the `assign` attribute
[1467][      debug] 
[1467][      debug]     report_when=  
[1467][      debug]     IN-NODE ObjCPropertyDecl: ((is_assign_property() AND is_property_pointer_type()))
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: BAD_POINTER_COMPARISON
[1467][      debug]     suggestion=  
[1467][      debug]     Did you mean to use/compare against the unboxed value instead? Please either explicitly compare the NSNumber instance to nil, or use one of the NSNumber accessors before the comparison.
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     Implicitly checking whether NSNumber pointer is nil or comparing to integral value
[1467][      debug] 
[1467][      debug]     report_when=  
[1467][      debug]     (((((((is_binop_with_kind(LAnd) OR is_binop_with_kind(LOr)) OR is_unop_with_kind(LNot)) OR is_unop_with_kind(LNot)) OR ((is_node(IfStmt) OR is_node(ForStmt)) OR is_node(WhileStmt))) AND EX[->_](has_type(NSNumber *))) OR ((((((is_binop_with_kind(EQ) OR is_binop_with_kind(NE)) OR is_binop_with_kind(GT)) OR is_binop_with_kind(GE)) OR is_binop_with_kind(LT)) OR is_binop_with_kind(LE)) AND EX[->_](((is_node(ImplicitCastExpr) AND has_type(NSNumber *)) AND (has_cast_kind(IntegralToPointer) OR has_cast_kind(NullToPointer)))))) OR (is_node(ConditionalOperator) AND EX[->Cond](has_type(NSNumber *))))
[1467][      debug] 
[1467][      debug]     bad_conditional=  
[1467][      debug]     (is_node(ConditionalOperator) AND EX[->Cond](has_type(NSNumber *)))
[1467][      debug] 
[1467][      debug]     use_num_as_bool=  
[1467][      debug]     ((bool_op() OR root_is_stmt_expecting_bool()) AND EX[->_](has_type(NSNumber *)))
[1467][      debug] 
[1467][      debug]     root_is_stmt_expecting_bool=  
[1467][      debug]     ((is_node(IfStmt) OR is_node(ForStmt)) OR is_node(WhileStmt))
[1467][      debug] 
[1467][      debug]     comparison_with_integral=  
[1467][      debug]     ((((((is_binop_with_kind(EQ) OR is_binop_with_kind(NE)) OR is_binop_with_kind(GT)) OR is_binop_with_kind(GE)) OR is_binop_with_kind(LT)) OR is_binop_with_kind(LE)) AND EX[->_](((is_node(ImplicitCastExpr) AND has_type(NSNumber *)) AND (has_cast_kind(IntegralToPointer) OR has_cast_kind(NullToPointer)))))
[1467][      debug] 
[1467][      debug]     bool_op=  
[1467][      debug]     (((is_binop_with_kind(LAnd) OR is_binop_with_kind(LOr)) OR is_unop_with_kind(LNot)) OR is_unop_with_kind(LNot))
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: REGISTERED_OBSERVER_BEING_DEALLOCATED
[1467][      debug]     suggestion=  
[1467][      debug]     Consider removing the object from the notification center before its deallocation.
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     Object self is registered in a notification center but not being removed before deallocation
[1467][      debug] 
[1467][      debug]     report_when=  
[1467][      debug]     IN-NODE ObjCImplementationDecl,ObjCProtocolDecl: ((NOT((ET[ObjCMethodDecl][Body]((EF[->_](call_method(addObserver:selector:name:object:)) OR EF[->_](call_method(addObserverForName:object:queue:usingBlock:)))) ==> ET[ObjCImplementationDecl,ObjCProtocolDecl][_]((ET[ObjCMethodDecl][Body](((EF[->_](call_method(removeObserver:)) OR EF[->_](call_method(removeObserver:name:object:))) OR ET[BlockDecl][Body]((EF[->_](call_method(removeObserver:)) OR EF[->_](call_method(removeObserver:name:object:)))))) OR EH[ObjCImplementationDecl](ET[ObjCMethodDecl][Body](((EF[->_](call_method(removeObserver:)) OR EF[->_](call_method(removeObserver:name:object:))) OR ET[BlockDecl][Body]((EF[->_](call_method(removeObserver:)) OR EF[->_](call_method(removeObserver:name:object:))))))))))) AND NOT(iphoneos_target_sdk_version_greater_or_equal(9.0))))
[1467][      debug] 
[1467][      debug]     eventually_removeObserver=  
[1467][      debug]     ET[ObjCImplementationDecl,ObjCProtocolDecl][_]((remove_observer_in_method() OR EH[ObjCImplementationDecl](remove_observer_in_method())))
[1467][      debug] 
[1467][      debug]     remove_observer_in_method=  
[1467][      debug]     ET[ObjCMethodDecl][Body](remove_observer1())
[1467][      debug] 
[1467][      debug]     remove_observer1=  
[1467][      debug]     (remove_observer() OR remove_observer_in_block())
[1467][      debug] 
[1467][      debug]     remove_observer_in_block=  
[1467][      debug]     ET[BlockDecl][Body](remove_observer())
[1467][      debug] 
[1467][      debug]     remove_observer=  
[1467][      debug]     (exists_method_calling_removeObserver() OR exists_method_calling_removeObserverName())
[1467][      debug] 
[1467][      debug]     exists_method_calling_removeObserverName=  
[1467][      debug]     EF[->_](call_method(removeObserver:name:object:))
[1467][      debug] 
[1467][      debug]     exists_method_calling_removeObserver=  
[1467][      debug]     EF[->_](call_method(removeObserver:))
[1467][      debug] 
[1467][      debug]     eventually_addObserver=  
[1467][      debug]     ET[ObjCMethodDecl][Body](add_observer())
[1467][      debug] 
[1467][      debug]     add_observer=  
[1467][      debug]     (exists_method_calling_addObserver() OR exists_method_calling_addObserverForName())
[1467][      debug] 
[1467][      debug]     exists_method_calling_addObserverForName=  
[1467][      debug]     EF[->_](call_method(addObserverForName:object:queue:usingBlock:))
[1467][      debug] 
[1467][      debug]     exists_method_calling_addObserver=  
[1467][      debug]     EF[->_](call_method(addObserver:selector:name:object:))
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: STRONG_DELEGATE_WARNING
[1467][      debug]     suggestion=  
[1467][      debug]     In general delegates should be declared weak or assign.
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     Property or ivar %decl_name% declared strong
[1467][      debug] 
[1467][      debug]     report_when=  
[1467][      debug]     IN-NODE ObjCPropertyDecl: ((((declaration_has_name([dD]elegate) AND NOT(declaration_has_name([dD]elegates))) AND NOT(declaration_has_name([qQ]ueue))) AND is_strong_property()))
[1467][      debug] 
[1467][      debug]     name_does_not_contains_queue=  
[1467][      debug]     NOT(declaration_has_name([qQ]ueue))
[1467][      debug] 
[1467][      debug]     name_does_not_contain_delegates=  
[1467][      debug]     NOT(declaration_has_name([dD]elegates))
[1467][      debug] 
[1467][      debug]     name_contains_delegate=  
[1467][      debug]     declaration_has_name([dD]elegate)
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: GLOBAL_VARIABLE_INITIALIZED_WITH_FUNCTION_OR_METHOD_CALL
[1467][      debug]     suggestion=  
[1467][      debug]     If the function/method call is expensive, it can affect the starting time of the app.
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     Global variable %decl_name% is initialized using a function or method call
[1467][      debug] 
[1467][      debug]     report_when=  
[1467][      debug]     IN-NODE VarDecl: ((((is_objc_extension() AND is_global_var()) AND NOT(is_const_var())) AND ET[VarDecl][InitExpr](EF[->_]((((((is_node(CallExpr) AND NOT(call_function(CGPointMake))) OR is_node(CXXTemporaryObjectExpr)) OR is_node(CXXMemberCallExpr)) OR is_node(CXXOperatorCallExpr)) OR is_node(ObjCMessageExpr))))))
[1467][      debug] 
[1467][      debug]     is_initialized_with_expensive_call=  
[1467][      debug]     ET[VarDecl][InitExpr](EF[->_](makes_an_expensive_call()))
[1467][      debug] 
[1467][      debug]     makes_an_expensive_call=  
[1467][      debug]     (((((is_node(CallExpr) AND NOT(call_function(CGPointMake))) OR is_node(CXXTemporaryObjectExpr)) OR is_node(CXXMemberCallExpr)) OR is_node(CXXOperatorCallExpr)) OR is_node(ObjCMessageExpr))
[1467][      debug] 
[1467][      debug]     is_global_variable=  
[1467][      debug]     ((is_objc_extension() AND is_global_var()) AND NOT(is_const_var()))
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: CXX_REFERENCE_CAPTURED_IN_OBJC_BLOCK
[1467][      debug]     suggestion=  
[1467][      debug]     C++ References are unmanaged and may be invalid by the time the block executes.
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     C++ Reference variable(s) %cxx_ref_captured_in_block% captured by Objective-C block
[1467][      debug] 
[1467][      debug]     report_when=  
[1467][      debug]     IN-NODE BlockExpr: (EX[->_]((is_node(BlockDecl) AND captures_cxx_references())))
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: UNAVAILABLE_API_IN_SUPPORTED_IOS_SDK
[1467][      debug]     severity=  
[1467][      debug]     ERROR
[1467][      debug] 
[1467][      debug]     suggestion=  
[1467][      debug]     This could cause a crash.
[1467][      debug] 
[1467][      debug]     name_hum_readable=  
[1467][      debug]     Unavailable API In Supported iOS SDK
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     %decl_ref_or_selector_name% is not available in the required iOS SDK version %iphoneos_target_sdk_version% (only available from version %available_ios_sdk%)
[1467][      debug] 
[1467][      debug]     report_when=  
[1467][      debug]     IN-NODE DeclRefExpr,ObjCMessageExpr: (EX[->PointerToDecl]((decl_unavailable_in_supported_ios_sdk() AND NOT(within_responds_to_selector_block()))))
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: UNAVAILABLE_CLASS_IN_SUPPORTED_IOS_SDK
[1467][      debug]     mode=  
[1467][      debug]     ON
[1467][      debug] 
[1467][      debug]     severity=  
[1467][      debug]     ERROR
[1467][      debug] 
[1467][      debug]     name_hum_readable=  
[1467][      debug]     Unavailable API In Supported iOS SDK
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     The receiver %receiver_method_call% of %name% is not available in the required iOS SDK version %iphoneos_target_sdk_version% (only available from version %class_available_ios_sdk%)
[1467][      debug] 
[1467][      debug]     report_when=  
[1467][      debug]     IN-NODE ObjCMessageExpr: (((class_unavailable_in_supported_ios_sdk() AND NOT(within_available_class_block())) AND (call_class_method(.*,alloc) OR call_class_method(.*,new))))
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: POINTER_TO_INTEGRAL_IMPLICIT_CAST
[1467][      debug]     doc_url=  
[1467][      debug]     https://clang.llvm.org/docs/DiagnosticsReference.html#wint-conversion
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     Implicit conversion from %child_type% to %type% in usage of %name%
[1467][      debug] 
[1467][      debug]     report_when=  
[1467][      debug]     IN-NODE ImplicitCastExpr: (has_cast_kind(PointerToIntegral))
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: POINTER_TO_CONST_OBJC_CLASS
[1467][      debug]     mode=  
[1467][      debug]     ON
[1467][      debug] 
[1467][      debug]     severity=  
[1467][      debug]     WARNING
[1467][      debug] 
[1467][      debug]     suggestion=  
[1467][      debug]     Consider using `%class_name% *const` instead, meaning
	                  the destination of the pointer cannot be changed.
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     `const %class_name%*` may not mean what you want:
                   it represents a mutable pointer pointing to an Objective-C
                   class where the ivars cannot be changed.
[1467][      debug] 
[1467][      debug]     report_when=  
[1467][      debug]     (is_decl() AND has_type_const_ptr_to_objc_class())
[1467][      debug] 
[1467][      debug]     name_hum_readable=  
[1467][      debug]     Pointer To const Objective-C Class
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Checker name: DISCOURAGED_WEAK_PROPERTY_CUSTOM_SETTER
[1467][      debug]     mode=  
[1467][      debug]     OFF
[1467][      debug] 
[1467][      debug]     severity=  
[1467][      debug]     WARNING
[1467][      debug] 
[1467][      debug]     message=  
[1467][      debug]     Custom setters are not called when ARC sets weak properties to nil.
[1467][      debug] 
[1467][      debug]     report_when=  
[1467][      debug]     IN-NODE ObjCMethodDecl: ((EX[->Body](True) AND EX[->AccessorForProperty setter](is_weak_property())))
[1467][      debug] 
[1467][      debug]     is_weak_property_setter=  
[1467][      debug]     EX[->AccessorForProperty setter](is_weak_property())
[1467][      debug] 
[1467][      debug]     has_body=  
[1467][      debug]     EX[->Body](True)
[1467][      debug] 
[1467][      debug] 
[1467][      debug] -------------------- 
[1467][      debug] 
[1467][      debug] Converting checkers in (condition, issue) pairs
[1467][      debug] 
[1467][      debug] Making condition and issue desc for checker 'DIRECT_ATOMIC_PROPERTY_ACCESS'
[1467][      debug] 
[1467][      debug] Condition =
[1467][      debug]     IN-NODE ObjCIvarRefExpr: (((((NOT(context_in_synchronized_block()) AND is_ivar_atomic()) AND NOT(is_method_property_accessor_of_ivar())) AND NOT(is_objc_constructor())) AND NOT(is_objc_dealloc())))
[1467][      debug] 
[1467][      debug] Issue_desc = {
[1467][      debug]    Id = DIRECT_ATOMIC_PROPERTY_ACCESS
[1467][      debug] {  Name = 
[1467][      debug]    Severity = WARNING
[1467][      debug]    Mode = On
[1467][      debug]    Description = Direct access to ivar %ivar_name% of an atomic property
[1467][      debug]    Suggestion = Accessing an ivar of an atomic property makes the property nonatomic.
[1467][      debug]    Docs URL = 
[1467][      debug]    Loc = -1
[1467][      debug] }
[1467][      debug] 
[1467][      debug] 
[1467][      debug] Making condition and issue desc for checker 'ASSIGN_POINTER_WARNING'
[1467][      debug] 
[1467][      debug] Condition =
[1467][      debug]     IN-NODE ObjCPropertyDecl: ((is_assign_property() AND is_property_pointer_type()))
[1467][      debug] 
[1467][      debug] Issue_desc = {
[1467][      debug]    Id = ASSIGN_POINTER_WARNING
[1467][      debug] {  Name = 
[1467][      debug]    Severity = WARNING
[1467][      debug]    Mode = On
[1467][      debug]    Description = Property %decl_name% is a pointer type marked with the `assign` attribute
[1467][      debug]    Suggestion = Use a different attribute like `strong` or `weak`.
[1467][      debug]    Docs URL = 
[1467][      debug]    Loc = -1
[1467][      debug] }
[1467][      debug] 
[1467][      debug] 
[1467][      debug] Making condition and issue desc for checker 'BAD_POINTER_COMPARISON'
[1467][      debug] 
[1467][      debug] Condition =
[1467][      debug]     (((((((is_binop_with_kind(LAnd) OR is_binop_with_kind(LOr)) OR is_unop_with_kind(LNot)) OR is_unop_with_kind(LNot)) OR ((is_node(IfStmt) OR is_node(ForStmt)) OR is_node(WhileStmt))) AND EX[->_](has_type(NSNumber *))) OR ((((((is_binop_with_kind(EQ) OR is_binop_with_kind(NE)) OR is_binop_with_kind(GT)) OR is_binop_with_kind(GE)) OR is_binop_with_kind(LT)) OR is_binop_with_kind(LE)) AND EX[->_](((is_node(ImplicitCastExpr) AND has_type(NSNumber *)) AND (has_cast_kind(IntegralToPointer) OR has_cast_kind(NullToPointer)))))) OR (is_node(ConditionalOperator) AND EX[->Cond](has_type(NSNumber *))))
[1467][      debug] 
[1467][      debug] Issue_desc = {
[1467][      debug]    Id = BAD_POINTER_COMPARISON
[1467][      debug] {  Name = 
[1467][      debug]    Severity = WARNING
[1467][      debug]    Mode = On
[1467][      debug]    Description = Implicitly checking whether NSNumber pointer is nil or comparing to integral value
[1467][      debug]    Suggestion = Did you mean to use/compare against the unboxed value instead? Please either explicitly compare the NSNumber instance to nil, or use one of the NSNumber accessors before the comparison.
[1467][      debug]    Docs URL = 
[1467][      debug]    Loc = -1
[1467][      debug] }
[1467][      debug] 
[1467][      debug] 
[1467][      debug] Making condition and issue desc for checker 'REGISTERED_OBSERVER_BEING_DEALLOCATED'
[1467][      debug] 
[1467][      debug] Condition =
[1467][      debug]     IN-NODE ObjCImplementationDecl,ObjCProtocolDecl: ((NOT((ET[ObjCMethodDecl][Body]((EF[->_](call_method(addObserver:selector:name:object:)) OR EF[->_](call_method(addObserverForName:object:queue:usingBlock:)))) ==> ET[ObjCImplementationDecl,ObjCProtocolDecl][_]((ET[ObjCMethodDecl][Body](((EF[->_](call_method(removeObserver:)) OR EF[->_](call_method(removeObserver:name:object:))) OR ET[BlockDecl][Body]((EF[->_](call_method(removeObserver:)) OR EF[->_](call_method(removeObserver:name:object:)))))) OR EH[ObjCImplementationDecl](ET[ObjCMethodDecl][Body](((EF[->_](call_method(removeObserver:)) OR EF[->_](call_method(removeObserver:name:object:))) OR ET[BlockDecl][Body]((EF[->_](call_method(removeObserver:)) OR EF[->_](call_method(removeObserver:name:object:))))))))))) AND NOT(iphoneos_target_sdk_version_greater_or_equal(9.0))))
[1467][      debug] 
[1467][      debug] Issue_desc = {
[1467][      debug]    Id = REGISTERED_OBSERVER_BEING_DEALLOCATED
[1467][      debug] {  Name = 
[1467][      debug]    Severity = WARNING
[1467][      debug]    Mode = On
[1467][      debug]    Description = Object self is registered in a notification center but not being removed before deallocation
[1467][      debug]    Suggestion = Consider removing the object from the notification center before its deallocation.
[1467][      debug]    Docs URL = 
[1467][      debug]    Loc = -1
[1467][      debug] }
[1467][      debug] 
[1467][      debug] 
[1467][      debug] Making condition and issue desc for checker 'STRONG_DELEGATE_WARNING'
[1467][      debug] 
[1467][      debug] Condition =
[1467][      debug]     IN-NODE ObjCPropertyDecl: ((((declaration_has_name([dD]elegate) AND NOT(declaration_has_name([dD]elegates))) AND NOT(declaration_has_name([qQ]ueue))) AND is_strong_property()))
[1467][      debug] 
[1467][      debug] Issue_desc = {
[1467][      debug]    Id = STRONG_DELEGATE_WARNING
[1467][      debug] {  Name = 
[1467][      debug]    Severity = WARNING
[1467][      debug]    Mode = On
[1467][      debug]    Description = Property or ivar %decl_name% declared strong
[1467][      debug]    Suggestion = In general delegates should be declared weak or assign.
[1467][      debug]    Docs URL = 
[1467][      debug]    Loc = -1
[1467][      debug] }
[1467][      debug] 
[1467][      debug] 
[1467][      debug] Making condition and issue desc for checker 'GLOBAL_VARIABLE_INITIALIZED_WITH_FUNCTION_OR_METHOD_CALL'
[1467][      debug] 
[1467][      debug] Condition =
[1467][      debug]     IN-NODE VarDecl: ((((is_objc_extension() AND is_global_var()) AND NOT(is_const_var())) AND ET[VarDecl][InitExpr](EF[->_]((((((is_node(CallExpr) AND NOT(call_function(CGPointMake))) OR is_node(CXXTemporaryObjectExpr)) OR is_node(CXXMemberCallExpr)) OR is_node(CXXOperatorCallExpr)) OR is_node(ObjCMessageExpr))))))
[1467][      debug] 
[1467][      debug] Issue_desc = {
[1467][      debug]    Id = GLOBAL_VARIABLE_INITIALIZED_WITH_FUNCTION_OR_METHOD_CALL
[1467][      debug] {  Name = 
[1467][      debug]    Severity = WARNING
[1467][      debug]    Mode = On
[1467][      debug]    Description = Global variable %decl_name% is initialized using a function or method call
[1467][      debug]    Suggestion = If the function/method call is expensive, it can affect the starting time of the app.
[1467][      debug]    Docs URL = 
[1467][      debug]    Loc = -1
[1467][      debug] }
[1467][      debug] 
[1467][      debug] 
[1467][      debug] Making condition and issue desc for checker 'CXX_REFERENCE_CAPTURED_IN_OBJC_BLOCK'
[1467][      debug] 
[1467][      debug] Condition =
[1467][      debug]     IN-NODE BlockExpr: (EX[->_]((is_node(BlockDecl) AND captures_cxx_references())))
[1467][      debug] 
[1467][      debug] Issue_desc = {
[1467][      debug]    Id = CXX_REFERENCE_CAPTURED_IN_OBJC_BLOCK
[1467][      debug] {  Name = 
[1467][      debug]    Severity = WARNING
[1467][      debug]    Mode = On
[1467][      debug]    Description = C++ Reference variable(s) %cxx_ref_captured_in_block% captured by Objective-C block
[1467][      debug]    Suggestion = C++ References are unmanaged and may be invalid by the time the block executes.
[1467][      debug]    Docs URL = 
[1467][      debug]    Loc = -1
[1467][      debug] }
[1467][      debug] 
[1467][      debug] 
[1467][      debug] Making condition and issue desc for checker 'UNAVAILABLE_API_IN_SUPPORTED_IOS_SDK'
[1467][      debug] 
[1467][      debug] Condition =
[1467][      debug]     IN-NODE DeclRefExpr,ObjCMessageExpr: (EX[->PointerToDecl]((decl_unavailable_in_supported_ios_sdk() AND NOT(within_responds_to_selector_block()))))
[1467][      debug] 
[1467][      debug] Issue_desc = {
[1467][      debug]    Id = UNAVAILABLE_API_IN_SUPPORTED_IOS_SDK
[1467][      debug] {  Name = Unavailable API In Supported iOS SDK
[1467][      debug]    Severity = ERROR
[1467][      debug]    Mode = On
[1467][      debug]    Description = %decl_ref_or_selector_name% is not available in the required iOS SDK version %iphoneos_target_sdk_version% (only available from version %available_ios_sdk%)
[1467][      debug]    Suggestion = This could cause a crash.
[1467][      debug]    Docs URL = 
[1467][      debug]    Loc = -1
[1467][      debug] }
[1467][      debug] 
[1467][      debug] 
[1467][      debug] Making condition and issue desc for checker 'UNAVAILABLE_CLASS_IN_SUPPORTED_IOS_SDK'
[1467][      debug] 
[1467][      debug] Condition =
[1467][      debug]     IN-NODE ObjCMessageExpr: (((class_unavailable_in_supported_ios_sdk() AND NOT(within_available_class_block())) AND (call_class_method(.*,alloc) OR call_class_method(.*,new))))
[1467][      debug] 
[1467][      debug] Issue_desc = {
[1467][      debug]    Id = UNAVAILABLE_CLASS_IN_SUPPORTED_IOS_SDK
[1467][      debug] {  Name = Unavailable API In Supported iOS SDK
[1467][      debug]    Severity = ERROR
[1467][      debug]    Mode = On
[1467][      debug]    Description = The receiver %receiver_method_call% of %name% is not available in the required iOS SDK version %iphoneos_target_sdk_version% (only available from version %class_available_ios_sdk%)
[1467][      debug]    Suggestion = 
[1467][      debug]    Docs URL = 
[1467][      debug]    Loc = -1
[1467][      debug] }
[1467][      debug] 
[1467][      debug] 
[1467][      debug] Making condition and issue desc for checker 'POINTER_TO_INTEGRAL_IMPLICIT_CAST'
[1467][      debug] 
[1467][      debug] Condition =
[1467][      debug]     IN-NODE ImplicitCastExpr: (has_cast_kind(PointerToIntegral))
[1467][      debug] 
[1467][      debug] Issue_desc = {
[1467][      debug]    Id = POINTER_TO_INTEGRAL_IMPLICIT_CAST
[1467][      debug] {  Name = 
[1467][      debug]    Severity = WARNING
[1467][      debug]    Mode = On
[1467][      debug]    Description = Implicit conversion from %child_type% to %type% in usage of %name%
[1467][      debug]    Suggestion = 
[1467][      debug]    Docs URL = https://clang.llvm.org/docs/DiagnosticsReference.html#wint-conversion
[1467][      debug]    Loc = -1
[1467][      debug] }
[1467][      debug] 
[1467][      debug] 
[1467][      debug] Making condition and issue desc for checker 'POINTER_TO_CONST_OBJC_CLASS'
[1467][      debug] 
[1467][      debug] Condition =
[1467][      debug]     (is_decl() AND has_type_const_ptr_to_objc_class())
[1467][      debug] 
[1467][      debug] Issue_desc = {
[1467][      debug]    Id = POINTER_TO_CONST_OBJC_CLASS
[1467][      debug] {  Name = Pointer To const Objective-C Class
[1467][      debug]    Severity = WARNING
[1467][      debug]    Mode = On
[1467][      debug]    Description = `const %class_name%*` may not mean what you want:
                   it represents a mutable pointer pointing to an Objective-C
                   class where the ivars cannot be changed.
[1467][      debug]    Suggestion = Consider using `%class_name% *const` instead, meaning
	                  the destination of the pointer cannot be changed.
[1467][      debug]    Docs URL = 
[1467][      debug]    Loc = -1
[1467][      debug] }
[1467][      debug] 
[1467][      debug] 
[1467][      debug] Making condition and issue desc for checker 'DISCOURAGED_WEAK_PROPERTY_CUSTOM_SETTER'
[1467][      debug] 
[1467][      debug] Condition =
[1467][      debug]     IN-NODE ObjCMethodDecl: ((EX[->Body](True) AND EX[->AccessorForProperty setter](is_weak_property())))
[1467][      debug] 
[1467][      debug] Issue_desc = {
[1467][      debug]    Id = DISCOURAGED_WEAK_PROPERTY_CUSTOM_SETTER
[1467][      debug] {  Name = 
[1467][      debug]    Severity = WARNING
[1467][      debug]    Mode = Off
[1467][      debug]    Description = Custom setters are not called when ARC sets weak properties to nil.
[1467][      debug]    Suggestion = 
[1467][      debug]    Docs URL = 
[1467][      debug]    Loc = -1
[1467][      debug] }
[1467][      debug] 
[1467][      debug] Start linting file infer.c with rules: 
[1467][      debug] DIRECT_ATOMIC_PROPERTY_ACCESS
[1467][      debug] ASSIGN_POINTER_WARNING
[1467][      debug] BAD_POINTER_COMPARISON
[1467][      debug] REGISTERED_OBSERVER_BEING_DEALLOCATED
[1467][      debug] STRONG_DELEGATE_WARNING
[1467][      debug] GLOBAL_VARIABLE_INITIALIZED_WITH_FUNCTION_OR_METHOD_CALL
[1467][      debug] CXX_REFERENCE_CAPTURED_IN_OBJC_BLOCK
[1467][      debug] UNAVAILABLE_API_IN_SUPPORTED_IOS_SDK
[1467][      debug] UNAVAILABLE_CLASS_IN_SUPPORTED_IOS_SDK
[1467][      debug] POINTER_TO_INTEGRAL_IMPLICIT_CAST
[1467][      debug] POINTER_TO_CONST_OBJC_CLASS
[1467][      debug] DISCOURAGED_WEAK_PROPERTY_CUSTOM_SETTER
[1467][      debug] 
[1467][      debug] Starting parsing type string 'NSNumber *'
[1467][      debug] 	Type_name parsed: `NSNumber`
[1467][      debug] 	Type effectively parsed: `Pointer (TypeName (NSNumber))`
[1467][      debug] 
[1467][      debug] Comparing c_type/abs_ctype for equality... Type compared: 
[1467][      debug] c_type = `<"BuiltinType":({"pointer":15},<"Int">)>`  
[1467][      debug] abs_ctype =`Pointer (TypeName (NSNumber))`
[1467][      debug] [WARNING:] Type Comparison failed... This might indicate that the types are different or the specified type is internally represented in a different way and therefore not recognized.
[1467][      debug] 
[1467][      debug] Comparing c_type/abs_ctype for equality... Type compared: 
[1467][      debug] c_type = `<"BuiltinType":({"pointer":15},<"Int">)>`  
[1467][      debug] abs_ctype =`Pointer (TypeName (NSNumber))`
[1467][      debug] [WARNING:] Type Comparison failed... This might indicate that the types are different or the specified type is internally represented in a different way and therefore not recognized.
[1467][      debug] End linting file infer.c
[1467][      debug] 
[1467][      debug]  Start building call/cfg graph for 'infer.c'....
[1467][      debug] 
[1467][      debug]  Start creating icfg
[1467][      debug] 
[1467][      debug] Creating a new procdesc for function: 'new_node1'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] ms = Method new_node1 [a, clang_ptr_15]->clang_ptr_2197 ({"file":"/home/qian/synthesis_program/test9/infer.c","line":9,"column":1},{"file":"/home/qian/synthesis_program/test9/infer.c","line":13,"column":1})
[1467][      debug] 
[1467][      debug] 
[1467][      debug] byvals = [ 0 ]
[1467][      debug] 
[1467][      debug] 
[1467][      debug] 
[1467][      debug] >>---------- ADDING METHOD: 'new_node1' ---------<<
[1467][      debug] 
[1467][      debug] 
[1467][      debug] 
[1467][      debug] >>---------- Start translating body of function: 'new_node1' ---------<<
[1467][      debug] 
[1467][      debug] Translating statement 'CompoundStmt' (pointer= '2189')
[1467][      debug] Translating statement 'ReturnStmt' (pointer= '2205')
[1467][      debug]   Priority is free. Locking priority node in 2205
[1467][      debug]     
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2206')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Translating statement 'DeclRefExpr' (pointer= '2207')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] 
[1467][      debug]  PVAR ='n'
[1467][      debug] 
[1467][      debug] Translating statement 'BinaryOperator' (pointer= '2199')
[1467][      debug]   BinaryOperator '<"Assign">'   priority node free = 'true'
[1467][      debug]   
[1467][      debug] Priority is free. Locking priority node in 2199
[1467][      debug] 
[1467][      debug] Translating statement 'MemberExpr' (pointer= '2200')
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2201')
[1467][      debug]     priority node free = 'false'
[1467][      debug]     
[1467][      debug] Translating statement 'DeclRefExpr' (pointer= '2202')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] 
[1467][      debug]  PVAR ='n'
[1467][      debug] 
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] Translating field 'v'
[1467][      debug] Type is  'N' 
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2203')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Translating statement 'DeclRefExpr' (pointer= '2204')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] 
[1467][      debug]  PVAR ='a'
[1467][      debug] 
[1467][      debug] Translating statement 'DeclStmt' (pointer= '2190')
[1467][      debug] Priority is free. Locking priority node in 2190
[1467][      debug]   
[1467][      debug] Translating statement 'CStyleCastExpr' (pointer= '2191')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Translating statement 'CallExpr' (pointer= '2192')
[1467][      debug] Priority busy in 2192. No claim possible
[1467][      debug]   
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2193')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Translating statement 'DeclRefExpr' (pointer= '2194')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] Creating a new procdesc for function: 'malloc'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] ms = Method malloc [__size, clang_ptr_9]->clang_ptr_844 ({"file":"/usr/include/stdlib.h","line":539,"column":1},{"file":"/usr/include/stdlib.h","line":539,"column":45})
[1467][      debug] 
[1467][      debug] 
[1467][      debug] byvals = [ 0 ]
[1467][      debug] 
[1467][      debug] 
[1467][      debug] WARNING: Missing translation for Cast Kind <"FunctionToPointerDecay">. The construct has been ignored...
[1467][      debug] Translating statement 'UnaryExprOrTypeTraitExpr' (pointer= '2196')
[1467][      debug] 
[1467][      debug] Creating a new procdesc for function: 'new_node2'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] ms = Method new_node2 [a, clang_ptr_15]->clang_ptr_2197 ({"file":"/home/qian/synthesis_program/test9/infer.c","line":15,"column":1},{"file":"/home/qian/synthesis_program/test9/infer.c","line":19,"column":1})
[1467][      debug] 
[1467][      debug] 
[1467][      debug] byvals = [ 0 ]
[1467][      debug] 
[1467][      debug] 
[1467][      debug] 
[1467][      debug] >>---------- ADDING METHOD: 'new_node2' ---------<<
[1467][      debug] 
[1467][      debug] 
[1467][      debug] 
[1467][      debug] >>---------- Start translating body of function: 'new_node2' ---------<<
[1467][      debug] 
[1467][      debug] Translating statement 'CompoundStmt' (pointer= '2210')
[1467][      debug] Translating statement 'ReturnStmt' (pointer= '2227')
[1467][      debug]   Priority is free. Locking priority node in 2227
[1467][      debug]     
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2228')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Translating statement 'DeclRefExpr' (pointer= '2229')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] 
[1467][      debug]  PVAR ='n'
[1467][      debug] 
[1467][      debug] Translating statement 'BinaryOperator' (pointer= '2218')
[1467][      debug]   BinaryOperator '<"Assign">'   priority node free = 'true'
[1467][      debug]   
[1467][      debug] Priority is free. Locking priority node in 2218
[1467][      debug] 
[1467][      debug] Translating statement 'MemberExpr' (pointer= '2219')
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2220')
[1467][      debug]     priority node free = 'false'
[1467][      debug]     
[1467][      debug] Translating statement 'DeclRefExpr' (pointer= '2221')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] 
[1467][      debug]  PVAR ='n'
[1467][      debug] 
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] Translating field 'v'
[1467][      debug] Type is  'N' 
[1467][      debug] Translating statement 'BinaryOperator' (pointer= '2222')
[1467][      debug]   BinaryOperator '<"Mul">'   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Priority busy in 2222. No claim possible
[1467][      debug] 
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2223')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Translating statement 'DeclRefExpr' (pointer= '2224')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] 
[1467][      debug]  PVAR ='a'
[1467][      debug] 
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2225')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Translating statement 'DeclRefExpr' (pointer= '2226')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] 
[1467][      debug]  PVAR ='a'
[1467][      debug] 
[1467][      debug] Translating statement 'DeclStmt' (pointer= '2211')
[1467][      debug] Priority is free. Locking priority node in 2211
[1467][      debug]   
[1467][      debug] Translating statement 'CStyleCastExpr' (pointer= '2212')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Translating statement 'CallExpr' (pointer= '2213')
[1467][      debug] Priority busy in 2213. No claim possible
[1467][      debug]   
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2214')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Translating statement 'DeclRefExpr' (pointer= '2215')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] WARNING: Missing translation for Cast Kind <"FunctionToPointerDecay">. The construct has been ignored...
[1467][      debug] Translating statement 'UnaryExprOrTypeTraitExpr' (pointer= '2216')
[1467][      debug] 
[1467][      debug] Creating a new procdesc for function: 'func'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] ms = Method func [a, clang_ptr_15]->clang_ptr_15 ({"file":"/home/qian/synthesis_program/test9/infer.c","line":21,"column":1},{"file":"/home/qian/synthesis_program/test9/infer.c","line":31,"column":1})
[1467][      debug] 
[1467][      debug] 
[1467][      debug] byvals = [ 0 ]
[1467][      debug] 
[1467][      debug] 
[1467][      debug] 
[1467][      debug] >>---------- ADDING METHOD: 'func' ---------<<
[1467][      debug] 
[1467][      debug] 
[1467][      debug] 
[1467][      debug] >>---------- Start translating body of function: 'func' ---------<<
[1467][      debug] 
[1467][      debug] Translating statement 'CompoundStmt' (pointer= '2232')
[1467][      debug] Translating statement 'ReturnStmt' (pointer= '2294')
[1467][      debug]   Priority is free. Locking priority node in 2294
[1467][      debug]     
[1467][      debug] Translating statement 'IntegerLiteral' (pointer= '2295')
[1467][      debug] Translating statement 'BinaryOperator' (pointer= '2289')
[1467][      debug]   BinaryOperator '<"Assign">'   priority node free = 'true'
[1467][      debug]   
[1467][      debug] Priority is free. Locking priority node in 2289
[1467][      debug] 
[1467][      debug] Translating statement 'MemberExpr' (pointer= '2290')
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2291')
[1467][      debug]     priority node free = 'false'
[1467][      debug]     
[1467][      debug] Translating statement 'DeclRefExpr' (pointer= '2292')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] 
[1467][      debug]  PVAR ='x'
[1467][      debug] 
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] Translating field 'v'
[1467][      debug] Type is  'N' 
[1467][      debug] Translating statement 'IntegerLiteral' (pointer= '2293')
[1467][      debug] Translating statement 'IfStmt' (pointer= '2269')
[1467][      debug] Translating Condition for If-then-else/Loop/Conditional Operator 
[1467][      debug]    No short-circuit condition
[1467][      debug]     BinaryOperator '<"LT">'   priority node free = 'true'
[1467][      debug]   
[1467][      debug] Priority is free. Locking priority node in 2271
[1467][      debug] 
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2272')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Translating statement 'DeclRefExpr' (pointer= '2273')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] 
[1467][      debug]  PVAR ='a'
[1467][      debug] 
[1467][      debug] Translating statement 'IntegerLiteral' (pointer= '2274')
[1467][      debug] Translating statement 'CompoundStmt' (pointer= '2275')
[1467][      debug] Translating statement 'BinaryOperator' (pointer= '2276')
[1467][      debug]     BinaryOperator '<"Assign">'   priority node free = 'true'
[1467][      debug]     
[1467][      debug] Priority is free. Locking priority node in 2276
[1467][      debug] 
[1467][      debug] Translating statement 'DeclRefExpr' (pointer= '2277')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] 
[1467][      debug]  PVAR ='x'
[1467][      debug] 
[1467][      debug] Translating statement 'CallExpr' (pointer= '2278')
[1467][      debug] Priority busy in 2278. No claim possible
[1467][      debug]   
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2279')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Translating statement 'ParenExpr' (pointer= '2280')
[1467][      debug] Translating statement 'UnaryOperator' (pointer= '2281')
[1467][      debug]   Priority busy in 2281. No claim possible
[1467][      debug]     
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2282')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Translating statement 'ArraySubscriptExpr' (pointer= '2283')
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2284')
[1467][      debug]     priority node free = 'false'
[1467][      debug]     
[1467][      debug] Translating statement 'DeclRefExpr' (pointer= '2285')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] 
[1467][      debug]  PVAR ='p'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] WARNING: Missing translation for Cast Kind <"ArrayToPointerDecay">. The construct has been ignored...
[1467][      debug] Translating statement 'IntegerLiteral' (pointer= '2286')
[1467][      debug] 
[1467][      debug] WARNING: Missing translation for Cast Kind <"FunctionToPointerDecay">. The construct has been ignored...
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2287')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Translating statement 'DeclRefExpr' (pointer= '2288')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] 
[1467][      debug]  PVAR ='a'
[1467][      debug] 
[1467][      debug] Translating statement 'NullStmt' (pointer= '2270')
[1467][      debug] Translating statement 'BinaryOperator' (pointer= '2254')
[1467][      debug]   BinaryOperator '<"Assign">'   priority node free = 'true'
[1467][      debug]   
[1467][      debug] Priority is free. Locking priority node in 2254
[1467][      debug] 
[1467][      debug] Translating statement 'DeclRefExpr' (pointer= '2255')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] 
[1467][      debug]  PVAR ='x'
[1467][      debug] 
[1467][      debug] Translating statement 'CallExpr' (pointer= '2256')
[1467][      debug] Priority busy in 2256. No claim possible
[1467][      debug]   
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2257')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Translating statement 'ParenExpr' (pointer= '2258')
[1467][      debug] Translating statement 'UnaryOperator' (pointer= '2259')
[1467][      debug]   Priority busy in 2259. No claim possible
[1467][      debug]     
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2260')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Translating statement 'ArraySubscriptExpr' (pointer= '2261')
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2262')
[1467][      debug]     priority node free = 'false'
[1467][      debug]     
[1467][      debug] Translating statement 'DeclRefExpr' (pointer= '2263')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] 
[1467][      debug]  PVAR ='p'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] WARNING: Missing translation for Cast Kind <"ArrayToPointerDecay">. The construct has been ignored...
[1467][      debug] Translating statement 'IntegerLiteral' (pointer= '2265')
[1467][      debug] 
[1467][      debug] WARNING: Missing translation for Cast Kind <"FunctionToPointerDecay">. The construct has been ignored...
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2267')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Translating statement 'DeclRefExpr' (pointer= '2268')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] 
[1467][      debug]  PVAR ='a'
[1467][      debug] 
[1467][      debug] Translating statement 'DeclStmt' (pointer= '2247')
[1467][      debug] Priority is free. Locking priority node in 2247
[1467][      debug]   
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2248')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Translating statement 'CallExpr' (pointer= '2249')
[1467][      debug] Priority busy in 2249. No claim possible
[1467][      debug]   
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2250')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Translating statement 'DeclRefExpr' (pointer= '2251')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] WARNING: Missing translation for Cast Kind <"FunctionToPointerDecay">. The construct has been ignored...
[1467][      debug] Translating statement 'UnaryExprOrTypeTraitExpr' (pointer= '2252')
[1467][      debug] Translating statement 'DeclStmt' (pointer= '2245')
[1467][      debug] Translating statement 'DeclStmt' (pointer= '2233')
[1467][      debug] Priority is free. Locking priority node in 2233
[1467][      debug]   
[1467][      debug] Translating statement 'InitListExpr' (pointer= '2234')
[1467][      debug] Priority busy in 2234. No claim possible
[1467][      debug]   
[1467][      debug] Priority busy in -1. No claim possible
[1467][      debug] 
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2235')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2236')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Translating statement 'DeclRefExpr' (pointer= '2237')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] WARNING: Missing translation for Cast Kind <"FunctionToPointerDecay">. The construct has been ignored...
[1467][      debug] Priority busy in -1. No claim possible
[1467][      debug] 
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2240')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Translating statement 'ImplicitCastExpr' (pointer= '2241')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug] Translating statement 'DeclRefExpr' (pointer= '2242')
[1467][      debug]   priority node free = 'false'
[1467][      debug]   
[1467][      debug]   priority node free = 'false'
[1467][      debug] 
[1467][      debug] 
[1467][      debug] WARNING: Missing translation for Cast Kind <"FunctionToPointerDecay">. The construct has been ignored...
[1467][      debug] 
[1467][      debug]  Finished creating icfg
[1467][      debug] 
[1467][      debug]  End building call/cfg graph for 'infer.c'.
[1467][      debug] METHOD SIGNATURES
[1467][      debug] malloc [undefined, Return type: void*, Formals:  __size:unsigned long, Locals: None]
[1467][      debug] new_node1 [defined, Return type: N*, Formals:  a:int, Locals:  n:N*]
[1467][      debug] new_node2 [defined, Return type: N*, Formals:  a:int, Locals:  n:N*]
[1467][      debug] func [defined, Return type: int, Formals:  a:int, Locals:  y:N* x:N* p:_fn_(*)[2*8]]
[1467][      debug] End translating and linting of AST file stdin of infer.c... OK!
[1467][      debug] Elapsed: 142ms.
[1467][      debug] 
[1467][   progress] Found 1 source file to analyze in /home/qian/synthesis_program/test9/infer-out
[1467][   progress] Starting analysis...
[1467][   progress] 
[1467][   progress] legend:
[1467][   progress]   "F" analyzing a file
[1467][   progress]   "." analyzing a procedure
[1467][   progress]   "C" analyzer crashed
[1467][   progress]   "T" timeout: procedure analysis took too much time
[1467][   progress]   "S" timeout: procedure analysis took too many symbolic execution steps
[1467][   progress]   "R" timeout: procedure analysis took too many recursive iterations
[1467][   progress] 
[1467][   progress] 
[1467][environment] Parallel jobs: 8
[1467][      debug] 
[1467][      debug] Processing 'infer.c'
[1467][   progress] F
[1476][   progress] .
[1476][      debug] 
[1476][      debug] infer.c:17: ERROR: NULL_DEREFERENCE [B1] pointer `n` last assigned on line 16 could be null and is dereferenced at line 17, column 5(biabduction/Rearrange.ml:1643:57-64:)
[1476][      debug] 
[1476][      debug] 
[1476][      debug] infer.c:17: ERROR: NULL_DEREFERENCE [B1] pointer `n` last assigned on line 16 could be null and is dereferenced at line 17, column 5(biabduction/Rearrange.ml:1643:57-64:)
[1476][      debug] 
[1476][      debug] 
[1476][   progress] .
[1476][      debug] Elapsed analysis time: new_node2: 16.471ms
[1476][      debug] 
[1476][      debug] infer.c:24: ERROR: DEAD_STORE The value written to &y (type N*) is never used
[1476][      debug] 
[1476][      debug] 
[1476][      debug] infer.c:24: ERROR: MEMORY_LEAK  memory dynamically allocated to `y` by call to `malloc()` at line 24, column 13 is not reachable after line 24, column 5(biabduction/Abs.ml:1082:18-25:)
[1476][      debug] 
[1476][      debug] 
[1476][   progress] .
[1476][      debug] 
[1476][      debug] infer.c:11: ERROR: NULL_DEREFERENCE [B1] pointer `n` last assigned on line 10 could be null and is dereferenced at line 11, column 5(biabduction/Rearrange.ml:1643:57-64:)
[1476][      debug] 
[1476][      debug] 
[1476][      debug] infer.c:11: ERROR: NULL_DEREFERENCE [B1] pointer `n` last assigned on line 10 could be null and is dereferenced at line 11, column 5(biabduction/Rearrange.ml:1643:57-64:)
[1476][      debug] 
[1476][      debug] Elapsed analysis time: new_node1: 5.41ms
[1476][      debug] 
[1476][      debug] infer.c:25: WARNING: SKIP_FUNCTION new_node1
[1476][      debug] 
[1476][      debug] 
[1476][      debug] infer.c:27: WARNING: SKIP_FUNCTION new_node2
[1476][      debug] 
[1476][      debug] 
[1476][      debug] infer.c:24: ERROR: MEMORY_LEAK  memory dynamically allocated to `y` by call to `malloc()` at line 24, column 13 is not reachable after line 24, column 5(biabduction/Abs.ml:1082:18-25:)
[1476][      debug] 
[1476][      debug] 
[1493][      phase] ============================================================
[1493][      phase] = New infer execution begins
[1493][      phase] ============================================================
[1493][environment] CWD = /home/qian/synthesis_program/test9
[1493][environment] No .inferconfig file found
[1493][environment] Project root = /home/qian/synthesis_program/test9
[1493][environment] INFER_ARGS =   @/tmp/args.tmp.9a9793
[1493][environment]   ++Contents of '/tmp/args.tmp.9a9793':
[1493][environment]     saver --error-report /home/qian/synthesis_program/test9/report.json
[1493][environment]   
[1493][environment] command line arguments:   /home/qian/saver/bin/infer saver --error-report
[1493][environment]                           report.json
[1493][environment] Analyzer: checkers
[1493][environment] Active checkers: annotation reachability (Java), biabduction (C/C++/ObjC, Java), fragment retains view (Java), immutable cast (Java), liveness (C/C++/ObjC), printf args (Java), ownership (C/C++/ObjC), RacerD (C/C++/ObjC, Java), SIOF (C/C++/ObjC), uninitialized variables (C/C++/ObjC)
[1493][   progress] - Fetching source files ...
[1493][   progress] --Fetching infer.c ... [1 of 1]
[1493][   progress] - Preanalysis begins ...
[1493][   progress] -- Drawing call graph ... 
[1493][   progress] -- # nodes_with_pointer_operations / # total nodes of global: 11 / 22
[1493][   progress] === All procs === { func, malloc, new_node1, new_node2 }
[1493][   progress] ===========
[1493][   progress] -- # of total locations : 5
[1493][   progress] -- Drawing call graph ... 
[1493][   progress] - Exit wrappers (0) : { }
[1493][   progress] Size-of-analyzed-program: 22
[1493][   progress] - Reading error report from /home/qian/synthesis_program/test9/report.json!
[1493][   progress] - # of reachable locations : 4
[1493][   progress] - # of reachable callees from the entry (func): 2
[1493][   progress] - # of use-only function calls : 0
[1493][   progress] - # of reachable callees in sliced callgraph (use-only calls): 2
[1493][   progress] - # of irrelevant function calls : 0
[1493][   progress] - # of reachable callees in sliced callgraph (irrelevant calls): 2
[1493][   progress] - # of difficult procedures : 0
[1493][   progress] - # of reachable callees in sliced callgraph (difficult procs): 2
[1493][   progress] [+] Analyzing programs...  Done!
[1493][   progress] [+] Recording results...  Done!
[1493][   progress] ### Deleted objects by intersection: { }
[1493][   progress] - Identifying V_src, V_sink, error nodes ...
[1493][   progress] -- # V_src: 1
[1493][   progress] -- # V_sink: 1
[1493][   progress] -- # error nodes: 33
[1493][   progress] 
[1493][   progress] - Initializing search space ... 
[1493][   progress] -- Initial opeartion space_0 size: 9
[1493][   progress] -- Initial opeartion space_1 : Infeasible
[1493][   progress] - Searching begins ... 
[1493][   progress] -- Final Patches: 
[1493][   progress] - [+] { Insert: if (true) free(*(func:y)) at 3 (line 30, column 5) }
[1493][   progress] 
[1493][   progress] ##### Solution Statistics ... ##### 
[1493][   progress] - # of the total solutions found : 1 
[1493][   progress] - # of the the smallest ops.     : 1 
[1493][   progress] - # of the the largest ops.      : 1 
[1493][   progress] ################################### 
[1493][   progress] 
[1493][   progress] 
[1493][   progress] PATCH SUCCEED
[1493][ intern err] Procname main not found

[1493][ intern err] Procname main not found

[1493][ intern err] get_proc_name: at node 0
[1493][ intern err] get_proc_name: at node 0
[1493][ intern err] 
[1493][environment] Infer log identifier is 
